#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct stack
{
    char *arr;
    int top;
    int size;
}*st;

int isempty(struct stack *st)
{
    if(st->top == -1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

char peek(struct stack *st)
{
    char c = st->arr[st->top];
    return c;
}

int isoperator(char c)
{
    if(c=='+' || c=='-' || c=='*' || c=='/' || c=='(' || c==')' || c=='^')
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

void push(struct stack *st, char c)
{
    st->top++;
    st->arr[st->top] = c;
}

char pop(struct stack *st)
{
    char c1 = st->arr[st->top];
    st->top--;
    return c1;
}

int prec(char c)
{
    if(c=='+' || c=='-')
    {
        return 1;
    }
    else if(c=='*' || c=='/')
    {
        return 2;
    }
    else if(c=='^')
    {
        return 3;
    }
    else
    {
        return -1;
    }
}
  

int intopos(char * exp)
{
    int i,k=-1;
    int n = strlen(exp);
    char post[n+1];
    st = (struct stack*)malloc(sizeof(struct stack));
    st->size = n;
    st->top = -1;
    st->arr = (char*)malloc((st->size) * (sizeof(char)));
    for(i=0; exp[i]; i++)
    {
        if(!isoperator(exp[i]))
        {
            post[++k] = exp[i];
        }
        else if(exp[i] == '(')
        {
            push(st,exp[i]);
        }
        else if(exp[i] == ')')
        {
            while(peek(st) != '(' && !isempty(st))
            {
                post[++k] = pop(st);
            }
            if(peek(st) != '(' && !isempty(st))
            {
                return -1;
            }
            else
            {
                pop(st);
            }
        }
        else
        {
            while (!isempty(st) && prec(exp[i]) <= prec(peek(st))) 
            {
                post[++k] = pop(st); 
            }
            push(st, exp[i]); 
        }
    }
    while(!isempty(st))
    {
        post[++k] = pop(st);
    }
    post[++k] = '\0';
    printf("%s ",post);
}

int main()
{
    char exp[] = "a+b*(c^d-e)^(f+g*h)-i";
    intopos(exp);
    return 0;
}
